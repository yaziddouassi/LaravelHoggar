<template>
  <div class="w-full mb-5">
    <div>
      <span class="font-bold">{{ hoggarinput.hogarDataLabels[props.cle] }}</span>
    </div>

    <!-- Fichiers existants -->
    <div v-if="existingFiles.length" class="mt-3 grid grid-cols-2 gap-4">
      <div v-for="(file, index) in existingFiles" :key="file" class="relative">
        
        <!-- Affichage en fonction du type de fichier -->
        <img v-if="isImage(file)" :src="hoggarinput.hogarDataUrlStorage + file" class="w-[250px] h-auto rounded-lg" />
        
        <audio v-else-if="isAudio(file)" controls class="w-[250px]">
          <source :src="hoggarinput.hogarDataUrlStorage + file" type="audio/mpeg" />
        </audio>

        <video v-else-if="isVideo(file)" controls class="w-[250px]">
          <source :src="hoggarinput.hogarDataUrlStorage + file" type="video/mp4" />
        </video>

        <a v-else :href="hoggarinput.hogarDataUrlStorage + file" target="_blank" class="text-blue-500">
          {{ file }}
        </a>

        <!-- Bouton de suppression -->
        <button
          type="button"
          @click="removeExistingFile(file)"
          class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs"
        >
          X
        </button>
      </div>
    </div>

    <!-- Input pour upload -->
    <div class="w-[100%] flex items-center justify-center mt-3">
      <label class="w-[100%]">
        <input type="file" multiple ref="fileInputRef" @change="handleFileSelection" accept="*/*" hidden />
        <div class="flex w-[100%] h-[50px] px-2 bg-[blue] rounded-full text-white text-sm font-semibold items-center justify-center cursor-pointer">
          Choisir un fichier
        </div>
      </label>
    </div>

    <!-- Prévisualisation des nouveaux fichiers -->
    <div v-if="filePreviews.length" class="mt-3 grid grid-cols-2 gap-4">
      <div v-for="(preview, index) in filePreviews" :key="preview.url" class="relative">
        
        <!-- Affichage dynamique en fonction du type -->
        <img v-if="isImage(preview.file.name)" :src="preview.url" class="w-[250px] h-auto rounded-lg" />
        
        <audio v-else-if="isAudio(preview.file.name)" controls class="w-[250px]">
          <source :src="preview.url" type="audio/mpeg" />
        </audio>

        <video v-else-if="isVideo(preview.file.name)" controls class="w-[250px]">
          <source :src="preview.url" type="video/mp4" />
        </video>

        <a v-else :href="preview.url" target="_blank" class="text-blue-500">
          {{ preview.file.name }}
        </a>

        <!-- Bouton de suppression -->
        <button
          type="button"
          @click="removeNewFile(index)"
          class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs"
        >
          X
        </button>
      </div>
    </div>

    <!-- Erreurs de validation -->
    <div v-if="hoggarinput.errors[props.cle]" class="text-red-500 text-sm mt-1">
      {{ hoggarinput.errors[props.cle] }}
    </div>
  </div>
</template>

<script setup>
import { ref, watch, onUnmounted, onMounted } from 'vue';
import { HoggarInput } from '@/HoggarLibs/stores/hoggarinput';

const props = defineProps({ cle: { type: String, required: true } });
const hoggarinput = HoggarInput();
const fileInputRef = ref(null);
const filePreviews = ref([]); 
const existingFiles = ref([]); 
const removedFiles = ref([]); 

// Charger les fichiers existants
onMounted(() => {
  if (hoggarinput.hogarRecordInput[props.cle]) {
    existingFiles.value = JSON.parse(hoggarinput.hogarRecordInput[props.cle] || '[]');
  }
});

// Gérer la sélection des fichiers
const handleFileSelection = (event) => {
  const files = Array.from(event.target.files);

  files.forEach((file) => {
    const preview = { file, url: URL.createObjectURL(file) };
    filePreviews.value.push(preview);
    hoggarinput.hogarDataValues[props.cle].push(file);
  });

  console.log("Nouveaux fichiers uploadés:", hoggarinput.hogarDataValues[props.cle]);
};

// Supprimer un fichier existant
const removeExistingFile = (filePath) => {
  const index = existingFiles.value.indexOf(filePath);
  if (index !== -1) {
    existingFiles.value.splice(index, 1);
    removedFiles.value.push(filePath);

    let recordInputArray = JSON.parse(hoggarinput.hogarRecordInput[props.cle] || '[]');
    recordInputArray = recordInputArray.filter(file => file !== filePath);
    hoggarinput.hogarRecordInput[props.cle] = JSON.stringify(recordInputArray);
  }
};

// Supprimer un fichier nouvellement ajouté
const removeNewFile = (index) => {
  URL.revokeObjectURL(filePreviews.value[index].url);
  filePreviews.value.splice(index, 1);
  hoggarinput.hogarDataValues[props.cle].splice(index, 1);
};

// Observer les fichiers supprimés et mettre à jour le formulaire
watch(removedFiles, (newVal) => {
  hoggarinput.hogarDataValues[`${props.cle}_removed`] = newVal;
});

// Nettoyer les URLs des objets pour éviter les fuites mémoire
onUnmounted(() => {
  filePreviews.value.forEach(preview => URL.revokeObjectURL(preview.url));
});

// Vérifier si c'est une image
const isImage = (fileName) => {
  return /\.(jpg|jpeg|png|gif|webp)$/i.test(fileName);
};

// Vérifier si c'est un fichier audio
const isAudio = (fileName) => {
  return /\.(mp3|wav|ogg|m4a)$/i.test(fileName);
};

// Vérifier si c'est une vidéo
const isVideo = (fileName) => {
  return /\.(mp4|webm|ogg|mov|avi)$/i.test(fileName);
};
</script>