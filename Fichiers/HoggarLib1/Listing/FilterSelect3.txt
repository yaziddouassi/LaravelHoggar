<template>
    <div>
      
    <div>
        {{ capitalizeFirstLetter(props.cle) }}
      </div>

      <div class="relative w-full text-black max-w-sm">
        <select 
          v-model="myInput"
          @change="replaceQuery"
          class="w-full pl-4 pr-10 py-2 border border-gray-300 rounded-lg
           focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option
            v-for="(option, index) in hoggarlisting.settings[props.cle2]"
            :key="index"
            :value="option"
          >
            {{ option }}
          </option>
        </select>
  
       
      </div>
    </div>
  </template>
  
  <script setup>
  import { ref } from 'vue'
  import { router, usePage } from '@inertiajs/vue3'
  import { HoggarListing } from '@/HoggarLibs/stores/hoggarlisting'
  import { HoggarInfo } from '@/HoggarLibs/stores/hoggarinfo'
  
  const hoggarlisting = HoggarListing()
  const hoggarinfo = HoggarInfo()
  
  const props = defineProps({
    cle: {
      type: String,
      required: true
    },
    cle2: {
      type: String,
      required: true
    },
  })
  

 

  const myInput = ref('')
  const page = usePage()
  const url = new URL(window.location.href)
  const params = new URLSearchParams(url.search)

  
  
  myInput.value = hoggarlisting.settings[props.cle2][0]

  if (params.has(props.cle)) {
     const temp = params.get(props.cle)
     if (hoggarlisting.settings[props.cle2].includes(temp)) {
        myInput.value = temp
     }
   
  }
  
  function replaceQuery() {
    const hoggar = JSON.parse(localStorage.getItem('hoggar'))
    const isValue = Object.values(hoggarinfo.sessionFilter).includes(props.cle)
  
    if (myInput.value !== '') {
      if (isValue) {
        hoggar[hoggarlisting.settings.hogarModelClassName][props.cle] = myInput.value
      } else {
        delete hoggar[hoggarlisting.settings.hogarModelClassName][props.cle]
      }
  
      localStorage.setItem('hoggar', JSON.stringify(hoggar))
      hoggarinfo.setRoutes(page.props.routes)
  
      const url = new URL(window.location.href)
      const params = new URLSearchParams(url.search)
  
      params.delete('page')
      params.set(props.cle, myInput.value)
  
      router.visit(`${url.pathname}?${params.toString()}`, {
        method: 'get',
        preserveState: true,
      })
  
    } else {
      delete hoggar[hoggarlisting.settings.hogarModelClassName][props.cle]
      localStorage.setItem('hoggar', JSON.stringify(hoggar))
      hoggarinfo.setRoutes(page.props.routes)
  
      const url = new URL(window.location.href)
      const params = new URLSearchParams(url.search)
  
      params.delete('page')
      params.delete(props.cle)
  
      router.visit(`${url.pathname}?${params.toString()}`, {
        method: 'get',
        preserveState: true,
      })
    }
  }
  
  function rezetInput() {
    const hoggar = JSON.parse(localStorage.getItem('hoggar'))
    const isValue = Object.values(hoggarinfo.sessionFilter).includes(props.cle)
  
    myInput.value = ''
    delete hoggar[hoggarlisting.settings.hogarModelClassName][props.cle]
    localStorage.setItem('hoggar', JSON.stringify(hoggar))
    hoggarinfo.setRoutes(page.props.routes)
  
    const url = new URL(window.location.href)
    const params = new URLSearchParams(url.search)
  
    params.delete('page')
    params.delete(props.cle)
  
    router.visit(`${url.pathname}?${params.toString()}`, {
      method: 'get',
      preserveState: true,
    })
  }
  
  const capitalizeFirstLetter = (str) => {
    if (!str) return ''
    return str.charAt(0).toUpperCase() + str.slice(1)
  }
  </script>